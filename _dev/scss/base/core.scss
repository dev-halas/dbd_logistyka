@use "sass:color";

html {
    scroll-behavior: smooth;
    scroll-padding-top: 10vh;
}

body {
    background-color: $dark;
    color: $white;
    font-family: 'Anybody', sans-serif;
    font-size: 16px;
    font-weight: 200;
    line-height: 1.5;
    min-height: 200vh;
}
h1, h2, h3, h4 {
    /*
    font-family: 'Open Sans', sans-serif;
    */
    line-height: 1.5;
}



a {
    text-decoration: none;
    color: inherit;
}

a, p {
    letter-spacing: 1px;
}

button {
    background-color: transparent;
    color: $white;
    border: none;
    cursor: pointer;
}

h1 {
    font-size: 2rem;
    font-weight: 800;
}

h2 {
    font-size: calculate-clamp(40, 50);
    font-weight: 800;
    line-height: 1.2;
}

.h2 {
    @extend h2;
}

h3 {
    font-size: calculate-clamp(30, 40);
    font-weight: 500;
    line-height: 1.3;
}

h4 {
    font-size: 1.4rem;
}

$breakpoints: (
  'mobile':  480px,
  'small': 768px,
  'tablet': 1024px,
  'laptop':  1200px,
  'large': 1600px,
  'fullhd': 1920px
) !default;

@mixin responsive($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
      // Prints a media query based on the value
      @media (max-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }
   
    // If the key doesn't exist in the map
    @else {
      @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}


$container: 90vw;
$containerSmall: 75vw;
$containerMobile: 90vw;

.container {
    width: min($container, 1520px);
    margin: 0 auto;
    position: relative;
    @include responsive('tablet') {
        width: min($containerMobile, 900px);
    }
}

.container--small {
    width: min($containerSmall, 1320px);
    margin: 0 auto;
    position: relative;
    @include responsive('tablet') {
        width: min($containerMobile, 900px);
    }
}

@media screen and (max-width: 782px) {
    html {
        margin-top: 0px !important;
    }
}

.button {
    color: $white;
    background: $gradient;
    display: inline-flex;
    padding: 12px 30px;
    font-weight: 400;
    justify-content: center;
    align-items: center;
    width: fit-content;
    border-radius: 20px;
    -webkit-border-radius: 20px;
    -moz-border-radius: 20px;
    -ms-border-radius: 20px;
    -o-border-radius: 20px;
    transition: all .3s ease-in-out;
    -webkit-transition: all .3s ease-in-out;
    -moz-transition: all .3s ease-in-out;
    -ms-transition: all .3s ease-in-out;
    -o-transition: all .3s ease-in-out;
}

.button:hover {
    transform: scale(1.1);
    -webkit-transform: scale(1.1);
    -moz-transform: scale(1.1);
    -ms-transform: scale(1.1);
    -o-transform: scale(1.1);
}

.button--outline {
    color: $white;
    position: relative;
    padding: 12px 30px;
    width: fit-content;
    display: inline-flex;
    transition: all .3s ease-in-out;
    -webkit-transition: all .3s ease-in-out;
    -moz-transition: all .3s ease-in-out;
    -ms-transition: all .3s ease-in-out;
    -o-transition: all .3s ease-in-out;
}

.button--outline:hover {
    transform: scale(1.1);
    -webkit-transform: scale(1.1);
    -moz-transform: scale(1.1);
    -ms-transform: scale(1.1);
    -o-transform: scale(1.1);
}

.button--outline::before {
    content: "";
    position: absolute;
    inset: 0;
    border-radius: 20px; 
    padding: 1px; 
    background: $gradient; 
    -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
}

.gradientBorder::before {
    content: "";
    position: absolute;
    inset: 0;
    border-radius: 20px; 
    padding: 1px; 
    background: $gradient; 
    -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
}

.gradient-outline-tile {
    width: calculate-clamp(250,400);
    height: 375px;
    flex-shrink: 0;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: 50px;
    backdrop-filter: blur( 4px );
    -webkit-backdrop-filter: blur( 4px );
    background: color.adjust($dark, $alpha: -0.6);
    border-radius: 30px;
    @extend .button--outline;

    &, .button--outline {
        &:before {
            border-radius: 30px;
        }
    
        &:hover {
            transform: none;
        }
    }

    @include responsive('tablet') {
        width: 400px;
    }

    @include responsive('mobile') {
        width: 100%;
    }
}

.gradientBG {
    background-color: $green;
    background-image: $gradient;
}

.radius30 {
    border-radius: 30px;
    -webkit-border-radius: 30px;
    -moz-border-radius: 30px;
    -ms-border-radius: 30px;
    -o-border-radius: 30px;
}

.gradientText {
    background-image: $gradient;
    width: fit-content;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent; 
    -moz-background-clip: text;
    -moz-text-fill-color: transparent;
}


